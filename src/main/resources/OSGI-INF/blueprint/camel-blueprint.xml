<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  

   Because the file is in the OSGI-INF/blueprint directory inside our JAR, it 
   will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see 
   the namespace definitions for both the Blueprint and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">
    <!-- 
      blueprint property placeholders, that will use etc/camel.activemq.blueprint.cfg 
      as the properties file with content like.       
        amq.url      = ${activemq.url}
        amq.username = ${activemq.username}
        amq.password = ${activemq.password}
    -->
    <!-- to setup camel servlet with OSGi HttpService -->
    <reference id="httpService" interface="org.osgi.service.http.HttpService"/>
    <bean
        class="org.apache.camel.component.servlet.osgi.OsgiServletRegisterer"
        destroy-method="unregister"
        id="bean-634c4483-e298-4deb-b039-7bf7860b" init-method="register">
        <property name="alias" value="/ldap"/>
        <property name="httpService" ref="httpService"/>
        <property name="servlet" ref="camelServlet"/>
    </bean>
    <bean
        class="org.apache.camel.component.servlet.CamelHttpTransportServlet" id="camelServlet"/>
    <cm:property-placeholder id="camel.activemq.blueprint" persistent-id="camel.activemq.blueprint">
        <cm:default-properties>
            <cm:property name="broker.url" value="vm://amq?broker.persistent=false"/>
            <cm:property name="broker.username" value="admin"/>
            <cm:property name="broker.password" value="admin"/>
        </cm:default-properties>
    </cm:property-placeholder>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dbDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/testdb"/>
        <property name="username" value="root"/>
        <property name="password" value="admin"/>
    </bean>
    <bean class="com.redhat.cee.ldappoller.LdapPoller"
        destroy-method="destroy" id="ldapPoller" init-method="create">
        <property name="dataSource" ref="dbDataSource"/>
    </bean>
    <!-- 
         Lets connect the Camel ActiveMQ component to the broker.
    -->
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="brokerURL" value="${broker.url}"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="usePooledConnection" value="false"/>
    </bean>
    <!--
        The namespace for the camelContext element in Blueprint is 'http://camel.apache.org/schema/blueprint'. 
        Additionally,  we can also define namespace prefixes we want to use them 
        in the XPath expressions in our CBR.

        While it is not required to assign id's to the <camelContext/> and <route/> 
        elements, it is a good idea to set those for runtime management purposes 
        (logging, JMX MBeans, ...)
    -->
    <camelContext id="amq-example-context"
        xmlns="http://camel.apache.org/schema/blueprint" xmlns:order="http://com.mycompany/examples/order">
        <!-- a route to generate a random order every 5th second -->
        <restConfiguration bindingMode="json" component="servlet"
            contextPath="/ldap" port="8181">
            <dataFormatProperty key="prettyPrint" value="true"/>
        </restConfiguration>
        <rest consumes="application/json" path="/ldap" produces="application/json">
            <description>Ldap rest service</description>
            <get uri="">
                <description>Find all ldap</description>
                <to uri="direct:ldap-by-date"/>
            </get>
        </rest>
        <route id="ldap poller">
            <from id="timerToStartPollerr" uri="timer:poller?period=60s"/>
            <log id="ldap poller" message="LDAP POLLING starting"/>
            <bean id="startLdapPoller" method="ldapPoller" ref="ldapPoller"/>
        </route>
        <!--
          When this route is started, it will automatically create the work/jms/input 
          directory where you can drop thefile that need to be processed.

          The <log/> elements are used to add human-friendly business logging statements. 
          They make it easier to see what the route is doing.

          Files that are consumed from the work/jms/input directory, are then sent 
          to the JMS queue incomingOrders on the ActiveMQ broker.
        -->
        <!--
          This route consumes messages from the JMS queue incomingOrders on the 
          ActiveMQ broker within the ESB.

          The <choice/> element contains the content based router. The two <when/> 
          clauses use XPath to define the criteria for entering that part of the 
          route. When the country in the XML message is set to UK or US, the file 
          will be moved to a directory for that country. The <otherwise/> element 
          ensures that any file that does not meet the requirements for either of 
          the <when/> elements will be moved to the work/jms/output/others directory.
        -->
        <route id="ldapRestRoute">
            <from id="_from1" uri="direct:ldap-by-date"/>
            <transform id="_transform1">
                <constant>{"msg": "Hello World Ldap by Date"}</constant>
            </transform>
        </route>
    </camelContext>
</blueprint>
